
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


enum RentType {
    apartment
    house
    hotel
}

enum PlaceType {
    entirely
    rooms
    bed
}

enum RentTime {
    day
    month
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    tenantId      String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tenant {
    id              String            @id @default(cuid())
    userId          String            @unique
    phone           Decimal           @db.Decimal(11, 0)
    firstname       String
    secondname      String?
    lastname        String
    description     String?
    tenantsProperty TenantsProperty[]
}

model TenantsProperty {
    id          Int       @id @default(autoincrement())
    tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    tenantId    String
    description String    @db.Text
    addressId   Int
    placeType   PlaceType
    rentTime    RentTime
    price       Decimal   @db.Decimal(9, 2)
    rentTypeId  Int
    rentType    RentType
}

model Address {
    id       Int     @id @default(autoincrement())
    country  String  @default("Россия")
    region   String  @default("Республика саха (Якутия)")
    city     String
    district String?
    street   String
}

model Apartment {
    id              Int     @id @default(autoincrement())
    floor           Int     @db.SmallInt
    rooms           Int     @db.SmallInt
    apartmentNumber Int     @db.SmallInt
    size            Int
    apartmentType   String? @db.VarChar(25)
}

model Hotel {
    id              Int @id @default(autoincrement())
    floor           Int @db.SmallInt
    rooms           Int @db.SmallInt
    beds            Int @db.SmallInt
    apartmentNumber Int @db.SmallInt
}

model House {
    id           Int     @id @default(autoincrement())
    floorNumbers Int     @db.SmallInt
    rooms        Int     @db.SmallInt
    houseType    String? @db.VarChar(25)
    houseSize    Int
    landSize     Int
}
